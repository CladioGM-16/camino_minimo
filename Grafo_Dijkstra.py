import heapq

# Definimos el grafo como un diccionario de listas de tuplas,
# donde cada tupla contiene el nodo vecino y el peso de la arista
grafo_de_rutas = {
    '1': [('2', 148.15)],
    '2': [('1', 148.15), ('3', 226.10), ('13', 233)],
    '3': [('2', 226.10), ('4', 129.60), ('10', 119.40)],
    '4': [('3', 129.60), ('5', 143.65), ('11', 127.70)],
    '5': [('4', 143.65), ('6', 267.10), ('12', 155.35)],
    '6': [('5', 267.10), ('7', 118.80), ('17', 171.90)],
    '7': [('6', 118.80), ('8', 140.94), ('19', 180.10)],
    '8': [('7', 140.94), ('9', 200.80), ('21', 221.50)],
    '9': [('8', 200.80), ('70', 96.45)],
    '10': [('3', 119.40), ('11', 126.75), ('14', 122.25)],
    '11': [('4', 127.70), ('10', 126.75), ('12', 130), ('15', 123.75)],
    '12': [('5', 155.35), ('11', 130), ('16', 114.35), ('17', 248.70)],
    '13': [('2', 233), ('14', 112.30)],
    '14': [('13', 112.30), ('10', 122.25), ('15', 130)],
    '15': [('14', 130), ('11', 123.75), ('16', 123.30)],
    '16': [('12', 114.35), ('15', 123.30), ('18', 255.10), ('73', 134.20)],
    '17': [('6', 171.90), ('12', 248.70), ('18', 120.80), ('19', 124.10)],
    '18': [('16', 255.10), ('17', 120.80), ('27', 124.60), ('20', 128.25)],
    '19': [('17', 124.10), ('7', 180.10), ('20', 121.90), ('21', 139.35)],
    '20': [('18', 128.25), ('19', 121.90), ('28', 132.85), ('22', 138.20)],
    '21': [('8', 221.50), ('19', 139.35), ('22', 113.80), ('23', 127.90)],
    '22': [('20', 138.20), ('21', 113.80), ('29', 146.20), ('24', 134.30)],
    '23': [('21', 127.90), ('24', 110), ('25', 72.25), ('69', 121.55)],
    '24': [('22', 134.30), ('23', 110), ('26', 73.45)],
    '25': [('23', 72.25), ('26', 113.55), ('70', 135.20)],
    '26': [('24', 73.45), ('25', 113.55), ('31', 132.70)],
    '27': [('18', 124.60), ('28', 115.10)],
    '28': [('20', 132.85), ('27', 115.10), ('29', 135.30), ('37', 254.50)],
    '29': [('22', 146.20), ('28', 135.30), ('30', 97.60), ('36', 257.35)],
    '30': [('29', 97.60), ('31', 104.45)],
    '31': [('26', 132.70), ('30', 104.45)],
    '32': [('33', 66), ('35', 117.15)],
    '33': [('32', 66), ('34', 117.80)],
    '34': [('33', 117.80), ('35', 63.10), ('41', 147.15)],
    '35': [('32', 117.15), ('34', 63.10), ('36', 121.25), ('42', 136.80)],
    '36': [('35', 121.25), ('37', 128.80), ('29', 257.35), ('43', 132.85)],
    '37': [('36', 128.80), ('28', 254.50), ('38', 116.50), ('44', 135.30)],
    '38': [('37', 116.50), ('39', 250)],
    '39': [('38', 250), ('40', 268.80), ('46', 132.60), ('72', 145.50)],
    '40': [('39', 268.80), ('71', 243.25), ('68', 188.20)],
    '41': [('34', 147.15), ('42', 60.65), ('47', 100.80)],
    '42': [('35', 136.80), ('41', 60.65), ('43', 140.50), ('48', 119.80)],
    '43': [('42', 140.50), ('36', 132.85), ('44', 133.70), ('49', 135)],
    '44': [('43', 133.70), ('37', 135.30), ('45', 106.10), ('50', 130)],
    '45': [('44', 106.10), ('46', 260.20), ('51', 116.25)],
    '46': [('39', 132.60), ('45', 260.20), ('52', 129)],
    '47': [('41', 100.80), ('48', 54.40), ('54', 128.75)],
    '48': [('47', 54.40), ('42', 119.80), ('55', 129.30)],
    '49': [('43', 135), ('48', 127.40), ('50', 125.20)],
    '50': [('49', 125.20), ('44', 130), ('51', 116.25), ('57', 119.85)],
    '51': [('50', 116.25), ('45', 130.50), ('52', 264.10), ('58', 124.85)],
    '52': [('51', 264.10), ('46', 129), ('60', 142.05), ('53', 126.4)],
    '53': [('52', 126.4), ('61', 139.40), ('71', 116.20)],
    '54': [('47', 128.75), ('55', 35.70)],
    '55': [('48', 129.30), ('54', 35.70), ('56', 137)],
    '56': [('55', 137), ('49', 114.70), ('57', 125.05)],
    '57': [('56', 125.05), ('50', 119.85), ('63', 124), ('58', 112.05)],
    '58': [('51', 124.85), ('57', 112.05), ('59', 134.80), ('64', 109.70)],
    '59': [('58', 134.80), ('60', 123.20), ('65', 105)],
    '60': [('52', 142.05), ('59', 123.20), ('61', 136), ('66', 101.55)],
    '61': [('53', 139.40), ('60', 136), ('62', 136.75), ('67', 105.35)],
    '62': [('61', 136.75), ('71', 158.20)],
    '63': [('57', 124), ('64', 108.70)],
    '64': [('58', 109.70), ('63', 108.70), ('65', 136.40)],
    '65': [('59', 105), ('64', 136.40), ('66', 125.70)],
    '66': [('60', 101.55), ('65', 125.70), ('67', 128.35)],
    '67': [('61', 105.35), ('66', 128.35)],
    '68': [('40', 188.20)],
    '69': [('70', 77.30), ('23', 121.55)],
    '70': [('9', 96.45), ('25', 135.20), ('69', 77.30)],
    '71': [('40', 243.35), ('53', 116.20), ('62', 158.20)],
    '72': [('39', 145.50), ('73', 128.15)],
    '73': [('16', 134.20), ('72', 128.15)]
}

# Establecemos la posicion de los nodos
posicion = {
    '1': (2, 2.75028),
    '2': (2, 2.15768),
    '3': (2, 1.25328), 
    '4': (2, 0.73488),
    '5': (2, 0.16028),
    '6': (2, -0.90812),
    '7': (2, -1.38332),
    '8': (2, -1.94708),
    '9': (2, -2.75028),
    '10': (1.5224, 1.23028),
    '11': (1.5224, 0.74628),
    '12': (1.5224, 0.22628),
    '13': (1.5224, 1.70548),
    '14': (1.0334, 1.25328),
    '15': (1.0334, 0.73328),
    '16': (1.0334, 0.24008),
    '17': (1.5224, -0.76852),
    '18': (1.0334, -0.78032),
    '19': (1.5224, -1.26792),
    '20': (1.0334, -1.29332),
    '21': (1.5224, -1.82236),
    '22': (1.0334, -1.84612),
    '23': (1.5224, -2.33396),
    '24': (1.0334, -2.38332),
    '25': (1.5124, -2.83596),#2.74996
    '26': (1.0334, -2.85012),#2.79212
    '27': (0.4966, -0.78032),
    '28': (0.4966, -1.24072),
    '29': (0.4966, -1.78192),
    '30': (0.4966, -2.23232),
    '31': (0.4966, -2.79012),#2.63012
    '32': (-0.016, -2.08252),
    '33': (-0.016, -2.50252),
    '34': (-0.598, -2.66952),#2.57852
    '35': (-0.598, -2.22612),
    '36': (-0.598, -1.74112),
    '37': (-0.598, -1.22592),
    '38': (-0.598, -0.75992),
    '39': (-0.598, 0.24008),
    '40': (-0.598, 1.31528),
    '41': (-1.1284, -2.79252),#2.70452
    '42': (-1.1284, -2.32192),
    '43': (-1.1284, -1.75992),
    '44': (-1.1284, -1.22512),
    '45': (-1.1284, -0.80072),
    '46': (-1.1284, 0.24008),
    '47': (-1.5714, -2.65552),#2.57052
    '48': (-1.5714, -2.18692),
    '49': (-1.5714, -1.67732),
    '50': (-1.5714, -1.17652),
    '51': (-1.5714, -0.71152),
    '52': (-1.5714, 0.34488),
    '53': (-1.5714, 0.85048),
    '54': (-2.2042, -2.77592),#2.68692
    '55': (-2.2042, -2.30412),
    '56': (-2.2042, -1.75612),
    '57': (-2.2042, -1.25592),
    '58': (-2.2042, -0.80772),
    '59': (-2.2042, -0.26852),
    '60': (-2.2042, 0.22428),
    '61': (-2.2042, 0.76828),
    '62': (-2.2042, 1.31528),
    '63': (-2.7256, -1.27732),#1.24632
    '64': (-2.7256, -0.79352),
    '65': (-2.7256, -0.24792),
    '66': (-2.7256, 0.25488),
    '67': (-2.7256, 0.76828),
    '68': (0.252, 1.31528),
    '69': (1.73125, -2.38842),
    '70': (1.74232, -2.83962),#2.76762
    '71': (-1.5714, 1.31528),
    '72': (-0.016, 0.24008),
    '73': (0.4966, 0.24008)
}


def dijkstra(grafo, origen, final):
    # InicializaciÃ³n
    distancias = {nodos: float('infinity') for nodos in grafo}
    distancias[origen] = 0
    predecesores = {nodos: None for nodos in grafo}
    cola_prioridad = [(0, origen)]  # La cola de prioridad se basa en un minheap

    while cola_prioridad:
        distancia_actual, actual = heapq.heappop(cola_prioridad)

        # Si hemos llegado al nodo objetivo, reconstruimos el camino y lo devolvemos
        if actual == final:
            camino1 = []
            nodo_actual = final
            while nodo_actual is not None:
                camino1.insert(0, nodo_actual)
                nodo_actual = predecesores[nodo_actual]
            return distancias[final], camino1

        # Si la distancia actual es mayor que la registrada,no lo actualizamos
        if distancia_actual > distancias[actual]:
            continue

        # Actualizamos las distancias para cada vecino del nodo actual
        for vecino, peso in grafo[actual]:
            distancia1 = distancia_actual + peso
            if distancia1 < distancias[vecino]:
                distancias[vecino] = distancia1
                predecesores[vecino] = actual
                heapq.heappush(cola_prioridad, (distancia1, vecino))

    # Si no hemos encontrado un camino, devolvemos infinito
    return float('infinity'), []